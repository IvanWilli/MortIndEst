% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lt_extrap_constrained.R
\name{lt_extrap_constrained}
\alias{lt_extrap_constrained}
\title{Extrapolate mortality by age, constrained to a life expectancy value.}
\usage{
lt_extrap_constrained(
  nMx,
  Age,
  Sex = "m",
  method = "classical",
  extrapLaw = "Gompertz",
  eOAG = NULL,
  OAnew = 100,
  alpha = NULL,
  beta = NULL,
  r = NULL,
  x_hat = NULL
)
}
\arguments{
\item{nMx}{numeric. Vector of mortality rates in abridged or single age classes.}

\item{Age}{integer. Vector with lower bound for each age class (could be integer or abridged). Last age is assumed as lower age from open age group.}

\item{Sex}{character. Either male \code{"m"}, or female \code{"f"}.}

\item{method}{character. This indicates how to calculate \verb{e_\{OAG\}} with methods: \code{classical} (default), \code{H-C} or \code{Mitra} (Ediev, 2014).}

\item{extrapLaw}{character. Available options: \code{Gompertz} or \code{Kannisto}.}

\item{eOAG}{numeric. An estimate of life expectancy in the input OAG age. If this has a value, then replace \code{method}.}

\item{OAnew}{integer. After extrapolating, pick a new OAG.}

\item{alpha}{numeric. Parameter for \code{H-C} method. Default values are automatically selected for input OAG.}

\item{beta}{numeric. Parameter for \code{H-C} method. Default values are automatically selected for input OAG.}

\item{r}{numeric. Parameter for \code{H-C} and \code{Mitra} methods. Annual growth rate of the population in the open age interval.}

\item{x_hat}{numeric. Parameter for \code{Mitra} method. Mean age of the population in the open age interval.}
}
\description{
Instead of fitting parameters from some mortality law in previous ages to an observed OAG, find the parameters for the mortality function that replicates e(OAG) (Ediev, 2016).
}
\examples{
\dontrun{
# Pakistan - 1968-1971 - males - OAG=65 - HLD (2020)
nMx <- c(0.13328, 0.01539, 0.0031, 0.00155, 0.00169, 0.00185, 0.00201,
         0.0024, 0.00289, 0.00367, 0.00498, 0.00736, 0.01214, 0.02301, 0.0879)
Age <- c(0L, 1L, 5L, 10L, 15L, 20L, 25L, 30L, 35L, 40L, 45L, 50L, 55L, 60L, 65L)
fit_extrap_constr <- lt_extrap_constrained(nMx, Age, OAnew = 100, extrapLaw = "Gompertz")
fit_extrap_constr$ex[fit_extrap_constr$Age == 65] - (1/nMx[Age == 65])
# if some other value is required on e(65), like 10. The function forces extrapolation to fit that value.
nMx <- c(0.13328, 0.01539, 0.0031, 0.00155, 0.00169, 0.00185, 0.00201,
         0.0024, 0.00289, 0.00367, 0.00498, 0.00736, 0.01214, 0.02301, 0.0879)
Age <- c(0L, 1L, 5L, 10L, 15L, 20L, 25L, 30L, 35L, 40L, 45L, 50L, 55L, 60L, 65L)
fit_extrap_constr <- lt_extrap_constrained(nMx, Age, OAnew = 100, extrapLaw = "Gompertz", eOAG = 10)$lt
fit_extrap_constr$ex[fit_extrap_constr$Age == 65] - 10
}
}
